
Junyoung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000aac  00000b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080012c  0080012c  00000b6c  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000172  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000393  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000861  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000021b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022b  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cd  00000000  00000000  0000253f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ea       	ldi	r30, 0xAC	; 172
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 32       	cpi	r26, 0x2C	; 44
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ac e2       	ldi	r26, 0x2C	; 44
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 19 01 	call	0x232	; 0x232 <main>
  c6:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <keypad_port_init>:

.global keypad_init,get_key

; C Function : void keypad_port_init(void);
keypad_port_init:
		push AC0
  ce:	0f 93       	push	r16

		; ROW_PORT &= (~ROW_MASK)
		; Key Scan Output Port Enable <- 0
		in AC0, ROW_PORT
  d0:	05 b3       	in	r16, 0x15	; 21
		andi AC0, ~ROW_MASK
  d2:	0f 70       	andi	r16, 0x0F	; 15
		out ROW_PORT, AC0				; Row Port Init(PC7-PC4 <- 0)
  d4:	05 bb       	out	0x15, r16	; 21

		; ROW_PORT_DDR  |= ROW_MASK
		; Key Scan Output Port : PC4-PC7
		in AC0, ROW_PORT_DDR
  d6:	04 b3       	in	r16, 0x14	; 20
		ori AC0, ROW_MASK
  d8:	00 6f       	ori	r16, 0xF0	; 240
		out ROW_PORT_DDR, AC0
  da:	04 bb       	out	0x14, r16	; 20
		
		; PORTE |= COL_MASK
		; External SW PullUp
		in AC0, COL_PORT				; Input Port Pull Up
  dc:	03 b1       	in	r16, 0x03	; 3
		ori AC0, COL_MASK
  de:	00 67       	ori	r16, 0x70	; 112
		out COL_PORT, AC0				; Col Port Init(PE6-PE4 <- 1)
  e0:	03 b9       	out	0x03, r16	; 3

		; COL_PORT_DDR  &= (~COL_MASK)
		in AC0, COL_PORT_DDR
  e2:	02 b1       	in	r16, 0x02	; 2
		andi AC0, ~COL_MASK
  e4:	0f 78       	andi	r16, 0x8F	; 143
		out COL_PORT_DDR, AC0			; Col Port <- Input Port(PE6-PE4 <- Input Port)
  e6:	02 b9       	out	0x02, r16	; 2

		pop AC0
  e8:	0f 91       	pop	r16
		ret
  ea:	08 95       	ret

000000ec <keypad_init>:

keypad_init:
		rcall keypad_port_init
  ec:	f0 df       	rcall	.-32     	; 0xce <keypad_port_init>
		sts keyPressed, RG_ZERO				; keyPressed의 초기 상태를 FALSE 로 설정
  ee:	10 92 00 01 	sts	0x0100, r1
		ret
  f2:	08 95       	ret

000000f4 <key_scan>:
; rcall key_scan
; C Function : unsigned char key_scan( void ) ; keyCode 만 Return 하는 경우
; C Function : unsigned int key_scan( void ) ; keyCode를 LSB 1 Byte, 
;    Key 가 눌린 회수를 MSB 1 Byte에 저장 하여 Return 한다.
key_scan:
		push AC0
  f4:	0f 93       	push	r16
		push AC1
  f6:	1f 93       	push	r17
		push ZL
  f8:	ef 93       	push	r30
		push ZH
  fa:	ff 93       	push	r31
		push colData
  fc:	3f 93       	push	r19
		push colScanCounter
  fe:	5f 93       	push	r21

		; pressedKeyNum 초기화
		clr pressedKeyNum
 100:	99 27       	eor	r25, r25
		clr keyCode					; 모든 Key가 Release 된 경우 zero를 Return
 102:	88 27       	eor	r24, r24

		ldi ZL,lo8(key_code_table1) 	;
 104:	e2 e0       	ldi	r30, 0x02	; 2
		ldi ZH,hi8(key_code_table1) 	; Z points to key_code_table 1
 106:	f1 e0       	ldi	r31, 0x01	; 1
		lds AC0, keyCodeMode
 108:	00 91 01 01 	lds	r16, 0x0101
		tst AC0
 10c:	00 23       	and	r16, r16
		breq multi_scan1
 10e:	01 f0       	breq	.+0      	; 0x110 <multi_scan1>

00000110 <multi_scan1>:
		
		; Row Scan Disable, Scan Port를 초기화 한다.
multi_scan1:
		in AC0, ROW_PORT
 110:	05 b3       	in	r16, 0x15	; 21
		ori AC0, ROW_MASK
 112:	00 6f       	ori	r16, 0xF0	; 240
		out ROW_PORT, AC0
 114:	05 bb       	out	0x15, r16	; 21

00000116 <key_scan1>:

key_scan1:
		ld AC1, Z+
 116:	11 91       	ld	r17, Z+
		cp AC1, RG_ZERO
 118:	11 15       	cp	r17, r1
		breq key_scan4
 11a:	e9 f0       	breq	.+58     	; 0x156 <key_scan4>

		; Row Scan Code Output
		in AC0, ROW_PORT
 11c:	05 b3       	in	r16, 0x15	; 21
		com AC1
 11e:	10 95       	com	r17
		and AC0, AC1
 120:	01 23       	and	r16, r17
		out ROW_PORT, AC0
 122:	05 bb       	out	0x15, r16	; 21

		NOP
 124:	00 00       	nop
		; Get Colum Data
		in colData, COL_PORT_PIN
 126:	31 b1       	in	r19, 0x01	; 1
		andi colData, COL_MASK
 128:	30 77       	andi	r19, 0x70	; 112
		
		; Row Scan Disable
		in AC0, ROW_PORT
 12a:	05 b3       	in	r16, 0x15	; 21
		ori AC0, ROW_MASK
 12c:	00 6f       	ori	r16, 0xF0	; 240
		out ROW_PORT, AC0
 12e:	05 bb       	out	0x15, r16	; 21

		; colData bit testing
		ldi colScanCounter, NUM_COLS
 130:	53 e0       	ldi	r21, 0x03	; 3

00000132 <key_scan2>:
key_scan2:
		mov AC0, colData
 132:	03 2f       	mov	r16, r19

		andi AC0, COL_TEST
 134:	00 74       	andi	r16, 0x40	; 64
		brne key_scan3					; 현재 Col Key 가 Press Test 
 136:	51 f4       	brne	.+20     	; 0x14c <key_scan3>
		ld keyCode, Z					; 현재 Col Key 가 Pressed 된 경우 get key code
 138:	80 81       	ld	r24, Z
		ldi AC0, '#'
 13a:	03 e2       	ldi	r16, 0x23	; 35
		cp AC0, keyCode					; # Code 가 입력 되면 
 13c:	08 17       	cp	r16, r24
		brne multi_scan2
 13e:	29 f4       	brne	.+10     	; 0x14a <multi_scan2>
		lds AC0, keyCodeMode
 140:	00 91 01 01 	lds	r16, 0x0101
		com AC0							; keyCodeMode를 변경 한다.
 144:	00 95       	com	r16
		sts keyCodeMode, AC0
 146:	00 93 01 01 	sts	0x0101, r16

0000014a <multi_scan2>:
				
multi_scan2:	
		inc pressedKeyNum
 14a:	93 95       	inc	r25

0000014c <key_scan3>:
key_scan3:
		ld AC0, Z+						; Z+ , AC0 값은 사용 하지 않는다.
 14c:	01 91       	ld	r16, Z+

		lsl colData
 14e:	33 0f       	add	r19, r19

		dec colScanCounter
 150:	5a 95       	dec	r21
		brne key_scan2
 152:	79 f7       	brne	.-34     	; 0x132 <key_scan2>

		rjmp key_scan1
 154:	e0 cf       	rjmp	.-64     	; 0x116 <key_scan1>

00000156 <key_scan4>:

key_scan4:
		pop colScanCounter
 156:	5f 91       	pop	r21
		pop	colData
 158:	3f 91       	pop	r19
		pop ZH
 15a:	ff 91       	pop	r31
		pop ZL
 15c:	ef 91       	pop	r30
		pop AC1
 15e:	1f 91       	pop	r17
		pop AC0
 160:	0f 91       	pop	r16
		ret
 162:	08 95       	ret

00000164 <get_key>:
;  RG_ARG0_H <- Pressed Key Number
; C Function : unsigned char get_key( void ) ; keyCode 만 Return 하는 경우
; C Function : unsigned int get_key( void ) ; keyCode를 LSB 1 Byte, 
;              Key 가 눌린 회수를 MSB 1 Byte에 저장 하여 Return 한다.
get_key:
		push AC0
 164:	0f 93       	push	r16

00000166 <get_key1>:

get_key1:
		; Row Scan Enable
		in AC0, ROW_PORT
 166:	05 b3       	in	r16, 0x15	; 21
		andi AC0, ~ROW_MASK
 168:	0f 70       	andi	r16, 0x0F	; 15
		out ROW_PORT, AC0
 16a:	05 bb       	out	0x15, r16	; 21
	...

0000016e <get_key2>:
		nop

get_key2:
		; Get Colum Data
		in colData, COL_PORT_PIN
 16e:	31 b1       	in	r19, 0x01	; 1
		andi colData, COL_MASK
 170:	30 77       	andi	r19, 0x70	; 112
		cpi colData, COL_MASK
 172:	30 37       	cpi	r19, 0x70	; 112
		brne get_key3					; Key pressed -> get_key2
 174:	49 f4       	brne	.+18     	; 0x188 <get_key3>
; Key 가 Release 된 상태 임

		lds AC0, keyPressed
 176:	00 91 00 01 	lds	r16, 0x0100
		cpi AC0, TRUE					; 
 17a:	0f 3f       	cpi	r16, 0xFF	; 255
		brne get_key2					; Release 상태가 계속 되고 있다. -> get_key1
 17c:	c1 f7       	brne	.-16     	; 0x16e <get_key2>
; 이제 막 Key 가 Release 됨
		sts keyPressed, RG_ZERO			;  Key 가 Release 상태로 변경 된 것을 keyPressed 변수에 저장 한다.
 17e:	10 92 00 01 	sts	0x0100, r1

		ldi RG_ARG0_L, DEBOUNCE_TIME	; 16mSec Delay
 182:	80 e1       	ldi	r24, 0x10	; 16
		rcall delay_1mSec
 184:	3d d1       	rcall	.+634    	; 0x400 <delay_1mSec>
		rjmp get_key2
 186:	f3 cf       	rjmp	.-26     	; 0x16e <get_key2>

00000188 <get_key3>:

; Key 가 Pressed 된 상태 임
get_key3:
		lds AC0, keyPressed
 188:	00 91 00 01 	lds	r16, 0x0100
		cpi AC0, TRUE					; 
 18c:	0f 3f       	cpi	r16, 0xFF	; 255
		breq get_key2					; Pressed 된 상태가 계속 되고 있음 -> getkey1
 18e:	79 f3       	breq	.-34     	; 0x16e <get_key2>

00000190 <get_key4>:

; 새 Key가 이제 막 Pressed 됨
get_key4:
		ldi RG_ARG0_L, DEBOUNCE_TIME	; 16mSec Delay
 190:	80 e1       	ldi	r24, 0x10	; 16
		rcall delay_1mSec
 192:	36 d1       	rcall	.+620    	; 0x400 <delay_1mSec>

		rcall key_scan
 194:	af df       	rcall	.-162    	; 0xf4 <key_scan>
		tst RG_ARG0_L					; Buncing 등의 문제로 zero 가 Return 되는 경우 다시 get_key를 실행 한다.
 196:	88 23       	and	r24, r24
		breq get_key1
 198:	31 f3       	breq	.-52     	; 0x166 <get_key1>

		ldi AC0, TRUE					; Key 가 Pressed 상태로 변경 된 것을 keyPressed 변수에 저장 한다.
 19a:	0f ef       	ldi	r16, 0xFF	; 255
		sts keyPressed, AC0
 19c:	00 93 00 01 	sts	0x0100, r16

		pop AC0
 1a0:	0f 91       	pop	r16
		ret
 1a2:	08 95       	ret

000001a4 <rx1_char>:
	tx1_char(letter);
}

unsigned char rx1_char(void)
{
	while ((UCSR1A&0x80) == 0);
 1a4:	80 91 9b 00 	lds	r24, 0x009B
 1a8:	87 ff       	sbrs	r24, 7
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <rx1_char>
	
	return UDR1;
 1ac:	80 91 9c 00 	lds	r24, 0x009C
}
 1b0:	08 95       	ret

000001b2 <tx1_char>:

void tx1_char(unsigned char data)
{
 1b2:	98 2f       	mov	r25, r24
	
	while ((UCSR1A&0x20) == 0);
 1b4:	80 91 9b 00 	lds	r24, 0x009B
 1b8:	85 ff       	sbrs	r24, 5
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <tx1_char+0x2>
	
	UDR1 = data;
 1bc:	90 93 9c 00 	sts	0x009C, r25
}
 1c0:	08 95       	ret

000001c2 <SCI_InChar>:
	tx1_char(letter);
}

unsigned char rx1_char(void)
{
	while ((UCSR1A&0x80) == 0);
 1c2:	80 91 9b 00 	lds	r24, 0x009B
 1c6:	87 ff       	sbrs	r24, 7
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <SCI_InChar>
	
	return UDR1;
 1ca:	80 91 9c 00 	lds	r24, 0x009C
	UDR1 = data;
}

unsigned short SCI_InChar(){ 
  return (rx1_char());
}
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <ASM_getchar>:


unsigned short ASM_getchar(void){ 
  return (get_key());
 1d2:	0e 94 b2 00 	call	0x164	; 0x164 <get_key>
}
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	08 95       	ret

000001da <SCI_OutChar>:
	//all peripherals are now initialized
	operation_mode = INPUT_FIRST_OPERAND;
	keyCodeMode = KEY_CODE_TABLE_1;
}

void SCI_OutChar(char letter){ 
 1da:	1f 93       	push	r17
 1dc:	18 2f       	mov	r17, r24
	UART_putchar(letter);
 1de:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_Transmit>
	tx1_char(letter);
 1e2:	81 2f       	mov	r24, r17
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <tx1_char>
}
 1ea:	1f 91       	pop	r17
 1ec:	08 95       	ret

000001ee <put_char>:

volatile unsigned int cnt = 0;


static int put_char(char c, FILE *stream)
{
 1ee:	1f 93       	push	r17
 1f0:	18 2f       	mov	r17, r24
	UART_putchar(c);
 1f2:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_Transmit>
	tx1_char(c);
 1f6:	81 2f       	mov	r24, r17
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <tx1_char>
	return 0; 
}
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	1f 91       	pop	r17
 204:	08 95       	ret

00000206 <Init_devices>:

//call this routine to initialize all peripherals
void Init_devices(void)
{
	unsigned int ubrr = MYUBRR;		// baud rate
	asm volatile(" cli ");			//disable all interrupts
 206:	f8 94       	cli
	UART_Init(ubrr);				// UART 0 초기화, Set baud rate(19200)
 208:	83 e3       	ldi	r24, 0x33	; 51
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <UART_Init>
	keypad_init();			// I/O Port init
 210:	0e 94 76 00 	call	0xec	; 0xec <keypad_init>
	asm volatile(" sei ");	//	Global Interrupt Enable
 214:	78 94       	sei
	LCD_init();
 216:	0e 94 a6 01 	call	0x34c	; 0x34c <LCD_init>
	fdevopen(put_char,0);   
 21a:	87 ef       	ldi	r24, 0xF7	; 247
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fdevopen>
	//all peripherals are now initialized
	operation_mode = INPUT_FIRST_OPERAND;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 2e 01 	sts	0x012E, r24
	keyCodeMode = KEY_CODE_TABLE_1;
 22c:	10 92 01 01 	sts	0x0101, r1
}
 230:	08 95       	ret

00000232 <main>:
unsigned short ASM_getchar(void){ 
  return (get_key());
}

int main (void)
{
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	1f 93       	push	r17
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	0f 92       	push	r0
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
	unsigned int num = 0;
	unsigned char ch;
	char input;

	Init_devices();
 242:	0e 94 03 01 	call	0x206	; 0x206 <Init_devices>

	UCSR1A = 0x00;
 246:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B = 0x98;
 24a:	88 e9       	ldi	r24, 0x98	; 152
 24c:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = 0x06;
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	80 93 9d 00 	sts	0x009D, r24
	UBRR1H = 0;
 256:	10 92 98 00 	sts	0x0098, r1
	UBRR1L = 103;
 25a:	87 e6       	ldi	r24, 0x67	; 103
 25c:	80 93 99 00 	sts	0x0099, r24

	LCD_SetCsr(1, 1);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_SetCsr>
	LCD_OutString("KHU EE Junyoung");
 268:	86 e1       	ldi	r24, 0x16	; 22
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_OutString>
	LCD_SetCsr(2, 1);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_SetCsr>
	//LCD_OutString("Avoid Balls!!!");
	

	// Infinite loop
	while(1){
		num = SCI_InUDec_OpCode(&input);
 278:	7e 01       	movw	r14, r28
 27a:	08 94       	sec
 27c:	e1 1c       	adc	r14, r1
 27e:	f1 1c       	adc	r15, r1
 280:	c7 01       	movw	r24, r14
 282:	0e 94 7f 03 	call	0x6fe	; 0x6fe <SCI_InUDec_OpCode>
		input = get_key();
 286:	0e 94 b2 00 	call	0x164	; 0x164 <get_key>
 28a:	89 83       	std	Y+1, r24	; 0x01
		SCI_OutChar(input);
 28c:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
	tx1_char(letter);
}

unsigned char rx1_char(void)
{
	while ((UCSR1A&0x80) == 0);
 290:	80 91 9b 00 	lds	r24, 0x009B
 294:	87 ff       	sbrs	r24, 7
 296:	fc cf       	rjmp	.-8      	; 0x290 <main+0x5e>
	
	return UDR1;
 298:	10 91 9c 00 	lds	r17, 0x009C
		input = get_key();
		SCI_OutChar(input);

		ch = SCI_InChar();
		
		if(ch != CR) {
 29c:	1d 30       	cpi	r17, 0x0D	; 13
 29e:	81 f3       	breq	.-32     	; 0x280 <main+0x4e>
			SCI_OutChar(ch);
 2a0:	81 2f       	mov	r24, r17
 2a2:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
			UART_putchar(ch);
 2a6:	81 2f       	mov	r24, r17
 2a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <UART_Transmit>
			//LCD_OutString("   ");
			//LCD_SetCsr(2, 1);
			
			
						
			LCD_OutChar(ch);
 2ac:	81 2f       	mov	r24, r17
 2ae:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_OutChar>
 2b2:	e6 cf       	rjmp	.-52     	; 0x280 <main+0x4e>

000002b4 <UART_Init>:
;  RG_ARG0_H <- UBRRH
;  RG_ARG0_L ,- UBRL
;  rcall USART_Init
; C Function : void USART_Init(unsigned int);
UART_Init:
		push AC0
 2b4:	0f 93       	push	r16
		; Set baud rate
		sts UBRR0H, RG_ARG0_H
 2b6:	90 93 90 00 	sts	0x0090, r25
		out ASM_UBRR0L, RG_ARG0_L
 2ba:	89 b9       	out	0x09, r24	; 9
		; Enable receiver and transmitter
		ldi AC0, (1<<RXEN)|(1<<TXEN)
 2bc:	08 e1       	ldi	r16, 0x18	; 24
		out ASM_UCSR0B,AC0
 2be:	0a b9       	out	0x0a, r16	; 10
		; Set frame format: 8data, 1stop bit
		ldi AC0, (0<<USBS)|(3<<UCSZ0)
 2c0:	06 e0       	ldi	r16, 0x06	; 6
		sts UCSR0C,AC0
 2c2:	00 93 95 00 	sts	0x0095, r16
		pop AC0
 2c6:	0f 91       	pop	r16
		ret
 2c8:	08 95       	ret

000002ca <UART_Transmit>:
;  RG_ARG0_L <- Transmit Data
; C Function : void ASM_putchar(unsigned char);
UART_Transmit:
UART_putchar:
		; Wait for empty transmit Rg
		sbis ASM_UCSR0A,UDRE
 2ca:	5d 9b       	sbis	0x0b, 5	; 11
		rjmp UART_Transmit
 2cc:	fe cf       	rjmp	.-4      	; 0x2ca <UART_Transmit>
		; Put data (AC0) into transmit Rg
		out ASM_UDR0,RG_ARG0_L
 2ce:	8c b9       	out	0x0c, r24	; 12
		ret
 2d0:	08 95       	ret

000002d2 <UART_Receive>:
;  RG_ARG0_H : zero
; C Function : unsigned char ASM_getchar(void);
UART_Receive:
UART_getchar:
		; Wait for data to be received
		sbis ASM_UCSR0A, RXC
 2d2:	5f 9b       	sbis	0x0b, 7	; 11
		rjmp UART_Receive
 2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <UART_Receive>
		; Get received data
		in RG_ARG0_L, ASM_UDR0
 2d6:	8c b1       	in	r24, 0x0c	; 12
		ret
 2d8:	08 95       	ret

000002da <LCD_port_init>:
.section .text


; C Function : void LCD_port_init(void);
LCD_port_init:
		push AC0
 2da:	0f 93       	push	r16
		push AC1
 2dc:	1f 93       	push	r17

		in AC0, LCD_DATA_PORT
 2de:	0b b3       	in	r16, 0x1b	; 27
		ldi AC1, LCD_PORT_MASK
 2e0:	1e ef       	ldi	r17, 0xFE	; 254
		com AC1
 2e2:	10 95       	com	r17
		and AC0, AC1
 2e4:	01 23       	and	r16, r17
		out LCD_DATA_PORT, AC0				; LCD Port Init(PA1-PA7 <- 0)
 2e6:	0b bb       	out	0x1b, r16	; 27

		ldi AC0, LCD_PORT_MASK
 2e8:	0e ef       	ldi	r16, 0xFE	; 254
		in AC1, LCD_DATA_PORT_DDR
 2ea:	1a b3       	in	r17, 0x1a	; 26
		or AC0, AC1
 2ec:	01 2b       	or	r16, r17
		out LCD_DATA_PORT_DDR, AC0			; LCD Port <- Output Port(PA1-PA7 <- Output Port)
 2ee:	0a bb       	out	0x1a, r16	; 26
		
		pop AC1
 2f0:	1f 91       	pop	r17
		pop AC0
 2f2:	0f 91       	pop	r16
		ret
 2f4:	08 95       	ret

000002f6 <LCD_OutChar>:
;  RG_ARG0_L <- Data(8 Bit)
;  RG_ARG0_H <- Clear
; rcall lcd_data
; C Function : void lcd_data(char );
LCD_OutChar:
		push RG_ARG0_L
 2f6:	8f 93       	push	r24
		push AC0
 2f8:	0f 93       	push	r16

		mov AC0, RG_ARG0_L					;
 2fa:	08 2f       	mov	r16, r24
		; 상위 4 Bit를 LCD Port에 Output
		andi RG_ARG0_L, LCD_DATA_PORT_MASK	;
 2fc:	80 7f       	andi	r24, 0xF0	; 240
		ori RG_ARG0_L, LCD_DATA_W
 2fe:	82 60       	ori	r24, 0x02	; 2
		out LCD_DATA_PORT, RG_ARG0_L
 300:	8b bb       	out	0x1b, r24	; 27
		rcall LCD_E					; 
 302:	1b d0       	rcall	.+54     	; 0x33a <LCD_E>
		
		; 하위 4 Bit를 LCD Port에 Output
		swap AC0                   
 304:	02 95       	swap	r16
		andi AC0, LCD_DATA_PORT_MASK
 306:	00 7f       	andi	r16, 0xF0	; 240
		ori AC0, LCD_DATA_W
 308:	02 60       	ori	r16, 0x02	; 2
		out LCD_DATA_PORT, AC0
 30a:	0b bb       	out	0x1b, r16	; 27
		rcall LCD_E 
 30c:	16 d0       	rcall	.+44     	; 0x33a <LCD_E>

		ldi  RG_ARG0_L,40			; Wait time > 10 usec
 30e:	88 e2       	ldi	r24, 0x28	; 40
		rcall delay_1uSec
 310:	85 d0       	rcall	.+266    	; 0x41c <delay_1uSec>

		pop AC0
 312:	0f 91       	pop	r16
		pop RG_ARG0_L
 314:	8f 91       	pop	r24
		ret
 316:	08 95       	ret

00000318 <LCD_OutCommand>:
;  RG_ARG0_L <- Command(8 Bit)
;  RG_ARG0_H <- Clear
; rcall lcd_command
; C Function : void lcd_command(char );
LCD_OutCommand:
		push RG_ARG0_L
 318:	8f 93       	push	r24
		push AC0
 31a:	0f 93       	push	r16

		mov AC0, RG_ARG0_L					;
 31c:	08 2f       	mov	r16, r24
		; 상위 4 Bit를 LCD Port에 Output
		andi RG_ARG0_L, LCD_DATA_PORT_MASK	;
 31e:	80 7f       	andi	r24, 0xF0	; 240
		ori RG_ARG0_L, LCD_INST_W
 320:	80 60       	ori	r24, 0x00	; 0
		out LCD_DATA_PORT, RG_ARG0_L
 322:	8b bb       	out	0x1b, r24	; 27
		rcall LCD_E					; 
 324:	0a d0       	rcall	.+20     	; 0x33a <LCD_E>
		
		; 하위 4 Bit를 LCD Port에 Output
		swap AC0                   
 326:	02 95       	swap	r16
		andi AC0, LCD_DATA_PORT_MASK
 328:	00 7f       	andi	r16, 0xF0	; 240
		ori AC0, LCD_INST_W
 32a:	00 60       	ori	r16, 0x00	; 0
		out LCD_DATA_PORT, AC0
 32c:	0b bb       	out	0x1b, r16	; 27
		rcall LCD_E 
 32e:	05 d0       	rcall	.+10     	; 0x33a <LCD_E>

		ldi  RG_ARG0_L,40			; Wait time > 10 usec
 330:	88 e2       	ldi	r24, 0x28	; 40
		rcall delay_1uSec
 332:	74 d0       	rcall	.+232    	; 0x41c <delay_1uSec>

		pop AC0
 334:	0f 91       	pop	r16
		pop RG_ARG0_L
 336:	8f 91       	pop	r24
		ret
 338:	08 95       	ret

0000033a <LCD_E>:
 
 ; Enable-Puls
 LCD_E:
		sbi LCD_DATA_PORT, LCD_COLTROL_E
 33a:	db 9a       	sbi	0x1b, 3	; 27
	...
		nop
		nop
		nop
		nop
		nop
		cbi LCD_DATA_PORT, LCD_COLTROL_E
 348:	db 98       	cbi	0x1b, 3	; 27
		
		ret                  
 34a:	08 95       	ret

0000034c <LCD_init>:
; Increment address, No displayshift, Display on, 
; Cursor off, Blink off, Cursormove, Shift right
; 4 bit, 2 line, 5 by 7dots
; C Function : void lcd_init(void );
LCD_init:
		push AC0
 34c:	0f 93       	push	r16
		push RG_ARG0_L
 34e:	8f 93       	push	r24


		rcall LCD_port_init			; LCD Output Port Init: PORTA
 350:	c4 df       	rcall	.-120    	; 0x2da <LCD_port_init>
		
		ldi  RG_ARG0_L,30			; Wait >15 msec after power(30mSec)
 352:	8e e1       	ldi	r24, 0x1E	; 30
		rcall delay_1mSec
 354:	55 d0       	rcall	.+170    	; 0x400 <delay_1mSec>
		
		; Command 0x30  No.1
		ldi AC0, 0x30
 356:	00 e3       	ldi	r16, 0x30	; 48
		out LCD_DATA_PORT, AC0
 358:	0b bb       	out	0x1b, r16	; 27
		rcall LCD_E
 35a:	ef df       	rcall	.-34     	; 0x33a <LCD_E>
		ldi  RG_ARG0_L,2			;  Wait > 160usec(200uSec Delay)
 35c:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 35e:	50 d0       	rcall	.+160    	; 0x400 <delay_1mSec>
		; Command 0x30  No.2
		rcall LCD_E
 360:	ec df       	rcall	.-40     	; 0x33a <LCD_E>
		ldi  RG_ARG0_L,2			;  Wait > 160usec(200uSec Delay)
 362:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 364:	4d d0       	rcall	.+154    	; 0x400 <delay_1mSec>
		; Command 0x30  No.3
		rcall LCD_E
 366:	e9 df       	rcall	.-46     	; 0x33a <LCD_E>
		ldi  RG_ARG0_L,2			;  Wait > 160usec(200uSec Delay)
 368:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 36a:	4a d0       	rcall	.+148    	; 0x400 <delay_1mSec>
		; DL=0 4-bit Interface
		ldi AC0, 0x20
 36c:	00 e2       	ldi	r16, 0x20	; 32
		out LCD_DATA_PORT, AC0		; DL=0 4-bit Interface
 36e:	0b bb       	out	0x1b, r16	; 27
		rcall LCD_E
 370:	e4 df       	rcall	.-56     	; 0x33a <LCD_E>
		ldi  RG_ARG0_L,2			; Wait > 160usec(200uSec Delay)
 372:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 374:	45 d0       	rcall	.+138    	; 0x400 <delay_1mSec>

		ldi RG_ARG0_L, 0x28			; DL=0 4-bit Interface, N=1 2-line mode
 376:	88 e2       	ldi	r24, 0x28	; 40
		rcall LCD_OutCommand
 378:	cf df       	rcall	.-98     	; 0x318 <LCD_OutCommand>
		ldi RG_ARG0_L, 0x0c			; D=1 Display on, C=0 Cursor, B=0 off, Blink off mode
 37a:	8c e0       	ldi	r24, 0x0C	; 12
		rcall LCD_OutCommand
 37c:	cd df       	rcall	.-102    	; 0x318 <LCD_OutCommand>
		ldi RG_ARG0_L, 0x06			; I/D=1 Increment, SH=1 Entire shift off mode
 37e:	86 e0       	ldi	r24, 0x06	; 6
		rcall LCD_OutCommand
 380:	cb df       	rcall	.-106    	; 0x318 <LCD_OutCommand>


		ldi  RG_ARG0_L,2			; Wait > 160usec(200uSec Delay)
 382:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 384:	3d d0       	rcall	.+122    	; 0x400 <delay_1mSec>
		rcall LCD_Clear				; clear display
 386:	03 d0       	rcall	.+6      	; 0x38e <LCD_Clear>

		pop RG_ARG0_L
 388:	8f 91       	pop	r24
		pop AC0
 38a:	0f 91       	pop	r16
		ret
 38c:	08 95       	ret

0000038e <LCD_Clear>:
 
; Clear
; C Function : void lcd_clear(void );
LCD_Clear:
		push RG_ARG0_L
 38e:	8f 93       	push	r24

		ldi RG_ARG0_L, 0x01			; Clear Command
 390:	81 e0       	ldi	r24, 0x01	; 1
		rcall LCD_OutCommand
 392:	c2 df       	rcall	.-124    	; 0x318 <LCD_OutCommand>
		ldi  RG_ARG0_L,2			; 1.6mSec Delay
 394:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 396:	34 d0       	rcall	.+104    	; 0x400 <delay_1mSec>
		
		rcall LCD_Home
 398:	02 d0       	rcall	.+4      	; 0x39e <LCD_Home>

		pop RG_ARG0_L
 39a:	8f 91       	pop	r24
		ret
 39c:	08 95       	ret

0000039e <LCD_Home>:
 
; Cursor Home Position
; C Function : void lcd_home(void );
LCD_Home:
		push RG_ARG0_L
 39e:	8f 93       	push	r24

		ldi RG_ARG0_L, 0x02			; Cursor Home
 3a0:	82 e0       	ldi	r24, 0x02	; 2
		rcall LCD_OutCommand
 3a2:	ba df       	rcall	.-140    	; 0x318 <LCD_OutCommand>
		ldi  RG_ARG0_L,2			; 1.6mSec Delay
 3a4:	82 e0       	ldi	r24, 0x02	; 2
		rcall delay_1mSec
 3a6:	2c d0       	rcall	.+88     	; 0x400 <delay_1mSec>

		pop RG_ARG0_L
 3a8:	8f 91       	pop	r24
		ret
 3aa:	08 95       	ret

000003ac <LCD_OutString>:
; Calling Sequence
;  RG_ARG0_L <- String Pointer Low Byte
;  RG_ARG0_H <- String Pointer High Byte
; C Function : void LCD_OutString(char *);
LCD_OutString:
		push ZL
 3ac:	ef 93       	push	r30
		push ZH
 3ae:	ff 93       	push	r31

		mov ZL, RG_ARG0_L
 3b0:	e8 2f       	mov	r30, r24
		mov ZH, RG_ARG0_H
 3b2:	f9 2f       	mov	r31, r25

000003b4 <OutString1>:

OutString1:
		ld RG_ARG0_L, Z+
 3b4:	81 91       	ld	r24, Z+
		and RG_ARG0_L, RG_ARG0_L
 3b6:	88 23       	and	r24, r24
		breq EndString
 3b8:	11 f0       	breq	.+4      	; 0x3be <EndString>
		rcall LCD_OutChar
 3ba:	9d df       	rcall	.-198    	; 0x2f6 <LCD_OutChar>
		rjmp OutString1
 3bc:	fb cf       	rjmp	.-10     	; 0x3b4 <OutString1>

000003be <EndString>:
EndString:
		pop ZH
 3be:	ff 91       	pop	r31
		pop ZL
 3c0:	ef 91       	pop	r30
		ret
 3c2:	08 95       	ret

000003c4 <LCD_SetCsr>:
; Calling Sequence
;  RG_ARG0_L <- LCD row position
;  RG_ARG1_L <- LCD col position
; C Function : void LCD_SetCsr(char row, char col);
LCD_SetCsr:
		push AC0
 3c4:	0f 93       	push	r16

		cpi RG_ARG0_L, 1
 3c6:	81 30       	cpi	r24, 0x01	; 1
		brne LCD_SetCsr1
 3c8:	11 f4       	brne	.+4      	; 0x3ce <LCD_SetCsr1>
		ldi AC0, FIST_LINE_START_ADDRESS
 3ca:	00 e8       	ldi	r16, 0x80	; 128
		rjmp LCD_SetCsr2
 3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <LCD_SetCsr2>

000003ce <LCD_SetCsr1>:
LCD_SetCsr1:
		cpi RG_ARG0_L, 2
 3ce:	82 30       	cpi	r24, 0x02	; 2
		brne LCD_SetCsr3
 3d0:	29 f4       	brne	.+10     	; 0x3dc <LCD_SetCsr3>
		ldi AC0, SECOND_LINE_START_ADDRESS
 3d2:	00 ec       	ldi	r16, 0xC0	; 192

000003d4 <LCD_SetCsr2>:
LCD_SetCsr2:
		add AC0, RG_ARG1_L
 3d4:	06 0f       	add	r16, r22
		dec AC0
 3d6:	0a 95       	dec	r16
		mov RG_ARG0_L, AC0
 3d8:	80 2f       	mov	r24, r16
		rcall LCD_OutCommand
 3da:	9e df       	rcall	.-196    	; 0x318 <LCD_OutCommand>

000003dc <LCD_SetCsr3>:
LCD_SetCsr3:

		pop AC0
 3dc:	0f 91       	pop	r16
		ret
 3de:	08 95       	ret

000003e0 <LCD_LCD_OutChar_row_col>:
;  RG_ARG0_L <- LCD row position
;  RG_ARG1_L <- LCD col position
;  RG_ARG2_L <- Char
; C Function : void LCD_LCD_OutChar_row_col(char row, char col, char letter);
LCD_LCD_OutChar_row_col:
		push AC0
 3e0:	0f 93       	push	r16

		cpi RG_ARG0_L, 1
 3e2:	81 30       	cpi	r24, 0x01	; 1
		brne LCD_LCD_OutChar_row_col1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <LCD_LCD_OutChar_row_col1>
		ldi AC0, FIST_LINE_START_ADDRESS
 3e6:	00 e8       	ldi	r16, 0x80	; 128
		rjmp LCD_LCD_OutChar_row_col2
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <LCD_LCD_OutChar_row_col2>

000003ea <LCD_LCD_OutChar_row_col1>:
LCD_LCD_OutChar_row_col1:
		cpi RG_ARG0_L, 2
 3ea:	82 30       	cpi	r24, 0x02	; 2
		brne LCD_LCD_OutChar_row_col3
 3ec:	39 f4       	brne	.+14     	; 0x3fc <LCD_LCD_OutChar_row_col3>
		ldi AC0, SECOND_LINE_START_ADDRESS
 3ee:	00 ec       	ldi	r16, 0xC0	; 192

000003f0 <LCD_LCD_OutChar_row_col2>:
LCD_LCD_OutChar_row_col2:
		add AC0, RG_ARG1_L
 3f0:	06 0f       	add	r16, r22
		dec AC0
 3f2:	0a 95       	dec	r16
		mov RG_ARG0_L, AC0
 3f4:	80 2f       	mov	r24, r16
		rcall LCD_OutCommand
 3f6:	90 df       	rcall	.-224    	; 0x318 <LCD_OutCommand>

		mov RG_ARG0_L, RG_ARG2_L
 3f8:	84 2f       	mov	r24, r20
		rcall LCD_OutChar
 3fa:	7d df       	rcall	.-262    	; 0x2f6 <LCD_OutChar>

000003fc <LCD_LCD_OutChar_row_col3>:
LCD_LCD_OutChar_row_col3:

		pop AC0
 3fc:	0f 91       	pop	r16
		ret
 3fe:	08 95       	ret

00000400 <delay_1mSec>:
; C Function : void delay_mSec(char );

delay_1mSec:
; 1cycle = 1/16000000 -> 0.0625uSec
; one loop takes 1mSec 
		push AC0
 400:	0f 93       	push	r16

		mov AC0, RG_ARG0_L
 402:	08 2f       	mov	r16, r24

00000404 <delay_1mSec1>:
delay_1mSec1:
		ldi RG_ARG0_L, 250
 404:	8a ef       	ldi	r24, 0xFA	; 250
		rcall delay_1uSec
 406:	0a d0       	rcall	.+20     	; 0x41c <delay_1uSec>
		ldi RG_ARG0_L, 250
 408:	8a ef       	ldi	r24, 0xFA	; 250
		rcall delay_1uSec
 40a:	08 d0       	rcall	.+16     	; 0x41c <delay_1uSec>
		ldi RG_ARG0_L, 250
 40c:	8a ef       	ldi	r24, 0xFA	; 250
		rcall delay_1uSec
 40e:	06 d0       	rcall	.+12     	; 0x41c <delay_1uSec>
		ldi RG_ARG0_L, 250
 410:	8a ef       	ldi	r24, 0xFA	; 250
		rcall delay_1uSec
 412:	04 d0       	rcall	.+8      	; 0x41c <delay_1uSec>
		dec AC0					; 1 cycle +
 414:	0a 95       	dec	r16
		brne delay_1mSec1		; 2 cycle = 16 cycle * 0.0625uSe=c  1uSec
 416:	b1 f7       	brne	.-20     	; 0x404 <delay_1mSec1>
		
		pop AC0
 418:	0f 91       	pop	r16
		ret
 41a:	08 95       	ret

0000041c <delay_1uSec>:
;  RG_ARG0_L <- uSec
;  RG_ARG0_H <- Clear
; rcall delay_uSec
; C Function : void delay_uSec(char );
delay_1uSec:
		push  RG_ARG0_L			; 2 cycle +
 41c:	8f 93       	push	r24

0000041e <delay_1uSec1>:
		
delay_1uSec1:
		push  RG_ARG0_L			; 2 cycle +
 41e:	8f 93       	push	r24
		pop   RG_ARG0_L			; 2 cycle +
 420:	8f 91       	pop	r24
		push  RG_ARG0_L			; 2 cycle +
 422:	8f 93       	push	r24
		pop   RG_ARG0_L			; 2 cycle +
 424:	8f 91       	pop	r24
		push  RG_ARG0_L			; 2 cycle +
 426:	8f 93       	push	r24
		pop   RG_ARG0_L			; 2 cycle +
 428:	8f 91       	pop	r24
		nop						; 1 cycle +
 42a:	00 00       	nop
		dec RG_ARG0_L			; 1 cycle +
 42c:	8a 95       	dec	r24
		brne delay_1uSec1		; 2 cycle = 16 cycle * 0.0625uSe=c  1uSec
 42e:	b9 f7       	brne	.-18     	; 0x41e <delay_1uSec1>

		pop RG_ARG0_L			; 2 cycle +
 430:	8f 91       	pop	r24
		ret
 432:	08 95       	ret

00000434 <SCI_UpCase>:

//--------------------SCI_UpCase-------------------------------
// converts lowercase to uppercase
// char by subtracting	$20 from lowercase ASCII to	make uppercase ASCII

char SCI_UpCase(char character){	
 434:	98 2f       	mov	r25, r24
  return ((character>='a') && (character<='z'))?character-0x20:character;}
 436:	81 56       	subi	r24, 0x61	; 97
 438:	8a 31       	cpi	r24, 0x1A	; 26
 43a:	08 f4       	brcc	.+2      	; 0x43e <SCI_UpCase+0xa>
 43c:	90 52       	subi	r25, 0x20	; 32
 43e:	89 2f       	mov	r24, r25
 440:	08 95       	ret

00000442 <SCI_upCaseString>:
}

//------------------------SCI_upCaseString------------------------
// converts a NULL terminated string to uppercase

void SCI_upCaseString(char *inString){
 442:	fc 01       	movw	r30, r24
 444:	07 c0       	rjmp	.+14     	; 0x454 <SCI_upCaseString+0x12>
  char *pt = inString;

// 'a' = 0x61 and 'A' = 0x41, so their difference is 0x20 
  while(*pt){  //  NULL => done 
    if((*pt >= 'a') && (*pt <= 'z'))
 446:	89 2f       	mov	r24, r25
 448:	81 56       	subi	r24, 0x61	; 97
 44a:	8a 31       	cpi	r24, 0x1A	; 26
 44c:	10 f4       	brcc	.+4      	; 0x452 <SCI_upCaseString+0x10>
      *pt -= 0x20;
 44e:	90 52       	subi	r25, 0x20	; 32
 450:	90 83       	st	Z, r25
    pt++;
 452:	31 96       	adiw	r30, 0x01	; 1

void SCI_upCaseString(char *inString){
  char *pt = inString;

// 'a' = 0x61 and 'A' = 0x41, so their difference is 0x20 
  while(*pt){  //  NULL => done 
 454:	90 81       	ld	r25, Z
 456:	99 23       	and	r25, r25
 458:	b1 f7       	brne	.-20     	; 0x446 <SCI_upCaseString+0x4>
    if((*pt >= 'a') && (*pt <= 'z'))
      *pt -= 0x20;
    pt++;
  }
}
 45a:	08 95       	ret

0000045c <SCI_OutUHex>:
// Output a 16 bit number in unsigned hexadecimal format
// Variable format 1 to 4 digits with no space before or after
// This function uses recursion to convert the number of 
//   unspecified length as an ASCII string

void SCI_OutUHex(unsigned short number){
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	ec 01       	movw	r28, r24
  if(number>=0x10)	{
 462:	c0 31       	cpi	r28, 0x10	; 16
 464:	d1 05       	cpc	r29, r1
 466:	58 f0       	brcs	.+22     	; 0x47e <SCI_OutUHex+0x22>
    SCI_OutUHex(number/0x10);
 468:	ce 01       	movw	r24, r28
 46a:	24 e0       	ldi	r18, 0x04	; 4
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	2a 95       	dec	r18
 472:	e1 f7       	brne	.-8      	; 0x46c <SCI_OutUHex+0x10>
 474:	0e 94 2e 02 	call	0x45c	; 0x45c <SCI_OutUHex>
    SCI_OutUHex(number%0x10);
 478:	cf 70       	andi	r28, 0x0F	; 15
 47a:	d0 70       	andi	r29, 0x00	; 0
 47c:	f2 cf       	rjmp	.-28     	; 0x462 <SCI_OutUHex+0x6>
  }
  else if(number<0xA){
 47e:	ca 30       	cpi	r28, 0x0A	; 10
 480:	d1 05       	cpc	r29, r1
 482:	18 f4       	brcc	.+6      	; 0x48a <SCI_OutUHex+0x2e>
    SCI_OutChar(number+'0');
 484:	9e 01       	movw	r18, r28
 486:	20 5d       	subi	r18, 0xD0	; 208
 488:	02 c0       	rjmp	.+4      	; 0x48e <SCI_OutUHex+0x32>
  }
  else{
    SCI_OutChar((number-0x0A)+'A');
 48a:	9e 01       	movw	r18, r28
 48c:	29 5c       	subi	r18, 0xC9	; 201
 48e:	82 2f       	mov	r24, r18
 490:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
  }
}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <SCI_OutUDec>:
// Output a 16 bit number in unsigned decimal format
// Variable format 1-5 digits with no space before or after
// This function uses recursion to convert decimal number
//   of unspecified length as an ASCII string 

void SCI_OutUDec(unsigned short n){
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
  if(n >= 10){
 4a0:	8a 30       	cpi	r24, 0x0A	; 10
 4a2:	91 05       	cpc	r25, r1
 4a4:	68 f0       	brcs	.+26     	; 0x4c0 <SCI_OutUDec+0x26>
    SCI_OutUDec(n/10); // Recursive Operation
 4a6:	6a e0       	ldi	r22, 0x0A	; 10
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 4ae:	cb 01       	movw	r24, r22
 4b0:	0e 94 4d 02 	call	0x49a	; 0x49a <SCI_OutUDec>
    n=n%10;
 4b4:	ce 01       	movw	r24, r28
 4b6:	6a e0       	ldi	r22, 0x0A	; 10
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	0e 94 cc 03 	call	0x798	; 0x798 <__udivmodhi4>
 4be:	ec 01       	movw	r28, r24
  }
  SCI_OutChar(n+'0'); /* n is between 0 and 9 */
 4c0:	9e 01       	movw	r18, r28
 4c2:	20 5d       	subi	r18, 0xD0	; 208
 4c4:	82 2f       	mov	r24, r18
 4c6:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
}
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <SCI_OutSDec>:
//    1) it outputs a "-", 
//    2) negates the number and 
//    3) outputs it with OutUDec.
// Otherwise, it just calls OutUDec (i.e., no "+" sign)

void SCI_OutSDec(short number){
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	ec 01       	movw	r28, r24
  if(number<0){	
 4d6:	97 ff       	sbrs	r25, 7
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <SCI_OutSDec+0x16>
    number = -number;
 4da:	d0 95       	com	r29
 4dc:	c1 95       	neg	r28
 4de:	df 4f       	sbci	r29, 0xFF	; 255
    SCI_OutChar('-');
 4e0:	8d e2       	ldi	r24, 0x2D	; 45
 4e2:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
  }
  SCI_OutUDec(number);
 4e6:	ce 01       	movw	r24, r28
 4e8:	0e 94 4d 02 	call	0x49a	; 0x49a <SCI_OutUDec>
}
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <SCI_OutString>:
*/

//-------------------------SCI_OutString------------------------
// Output String (NULL termination)

void SCI_OutString(char *pt){ char letter;
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <SCI_OutString+0xc>
  while((letter=*pt++)){
    SCI_OutChar(letter);
 4fa:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>

//-------------------------SCI_OutString------------------------
// Output String (NULL termination)

void SCI_OutString(char *pt){ char letter;
  while((letter=*pt++)){
 4fe:	89 91       	ld	r24, Y+
 500:	88 23       	and	r24, r24
 502:	d9 f7       	brne	.-10     	; 0x4fa <SCI_OutString+0x8>
    SCI_OutChar(letter);
  }
}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <SCI_InString>:
// If a backspace is inputted, the string is modified 
//    and the backspace is echoed
// InString terminates the string with a null character
// -- Modified by Agustinus Darmawan + Mingjie Qiu --

void SCI_InString(char *string, unsigned int max) {	
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	8c 01       	movw	r16, r24
 518:	7b 01       	movw	r14, r22
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	d0 e0       	ldi	r29, 0x00	; 0
 51e:	11 c0       	rjmp	.+34     	; 0x542 <SCI_InString+0x38>
unsigned int length=0;
unsigned char character;

  while((character=SCI_InChar())!=CR){
    if(character==BS){
 520:	88 30       	cpi	r24, 0x08	; 8
 522:	31 f4       	brne	.+12     	; 0x530 <SCI_InString+0x26>
      if(length){
 524:	20 97       	sbiw	r28, 0x00	; 0
 526:	69 f0       	breq	.+26     	; 0x542 <SCI_InString+0x38>
        string--;
 528:	01 50       	subi	r16, 0x01	; 1
 52a:	10 40       	sbci	r17, 0x00	; 0
        length--;
 52c:	21 97       	sbiw	r28, 0x01	; 1
 52e:	07 c0       	rjmp	.+14     	; 0x53e <SCI_InString+0x34>
        SCI_OutChar(BS);
      }
    }
    else if(length<max){
 530:	ce 15       	cp	r28, r14
 532:	df 05       	cpc	r29, r15
 534:	30 f4       	brcc	.+12     	; 0x542 <SCI_InString+0x38>
      *string++=character;
 536:	f8 01       	movw	r30, r16
 538:	81 93       	st	Z+, r24
 53a:	8f 01       	movw	r16, r30
      length++; 
 53c:	21 96       	adiw	r28, 0x01	; 1
      SCI_OutChar(character);
 53e:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>

void SCI_InString(char *string, unsigned int max) {	
unsigned int length=0;
unsigned char character;

  while((character=SCI_InChar())!=CR){
 542:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 546:	8d 30       	cpi	r24, 0x0D	; 13
 548:	59 f7       	brne	.-42     	; 0x520 <SCI_InString+0x16>
      *string++=character;
      length++; 
      SCI_OutChar(character);
    }
  }
  *string = 0;   // 문자열의 끝에 Null code 삽입함.
 54a:	f8 01       	movw	r30, r16
 54c:	10 82       	st	Z, r1
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	ef 90       	pop	r14
 55a:	08 95       	ret

0000055c <SCI_InUHex>:
//     and converts to a 16 bit unsigned number
//     with a maximum value of FFFF
// If you enter a number above FFFF, it will truncate without reporting the error
// Backspace will remove last digit typed

unsigned short SCI_InUHex(void){	
 55c:	0f 93       	push	r16
 55e:	1f 93       	push	r17
 560:	cf 93       	push	r28
 562:	df 93       	push	r29
 564:	c0 e0       	ldi	r28, 0x00	; 0
 566:	d0 e0       	ldi	r29, 0x00	; 0
 568:	00 e0       	ldi	r16, 0x00	; 0
 56a:	10 e0       	ldi	r17, 0x00	; 0
 56c:	2c c0       	rjmp	.+88     	; 0x5c6 <SCI_InUHex+0x6a>
unsigned short number=0, digit, length=0;
unsigned char character;

  while((character=SCI_UpCase(SCI_InChar()))!=CR){	
    digit = 0x10; // assume bad
    if((character>='0') && (character<='9')){
 56e:	82 2f       	mov	r24, r18
 570:	80 53       	subi	r24, 0x30	; 48
 572:	8a 30       	cpi	r24, 0x0A	; 10
 574:	20 f4       	brcc	.+8      	; 0x57e <SCI_InUHex+0x22>
      digit = character-'0';
 576:	82 2f       	mov	r24, r18
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	c0 97       	sbiw	r24, 0x30	; 48
 57c:	07 c0       	rjmp	.+14     	; 0x58c <SCI_InUHex+0x30>
    }
    else if((character>='A') && (character<='F')){ 
 57e:	82 2f       	mov	r24, r18
 580:	81 54       	subi	r24, 0x41	; 65
 582:	86 30       	cpi	r24, 0x06	; 6
 584:	88 f4       	brcc	.+34     	; 0x5a8 <SCI_InUHex+0x4c>
      digit = (character-'A')+0xA;
 586:	82 2f       	mov	r24, r18
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	c7 97       	sbiw	r24, 0x37	; 55
    }

// If the character is not 0-9 or A-F, it is ignored and not echoed
    if(digit<=0xF ){	
 58c:	80 31       	cpi	r24, 0x10	; 16
 58e:	91 05       	cpc	r25, r1
 590:	58 f4       	brcc	.+22     	; 0x5a8 <SCI_InUHex+0x4c>
      number = number*0x10+digit;
 592:	44 e0       	ldi	r20, 0x04	; 4
 594:	cc 0f       	add	r28, r28
 596:	dd 1f       	adc	r29, r29
 598:	4a 95       	dec	r20
 59a:	e1 f7       	brne	.-8      	; 0x594 <SCI_InUHex+0x38>
 59c:	c8 0f       	add	r28, r24
 59e:	d9 1f       	adc	r29, r25
      length++;
 5a0:	0f 5f       	subi	r16, 0xFF	; 255
 5a2:	1f 4f       	sbci	r17, 0xFF	; 255
      SCI_OutChar(character);
 5a4:	82 2f       	mov	r24, r18
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <SCI_InUHex+0x66>
    }

// Backspace outputted and return value changed if a backspace is inputted
    else if(character==BS && length){
 5a8:	28 30       	cpi	r18, 0x08	; 8
 5aa:	69 f4       	brne	.+26     	; 0x5c6 <SCI_InUHex+0x6a>
 5ac:	01 15       	cp	r16, r1
 5ae:	11 05       	cpc	r17, r1
 5b0:	51 f0       	breq	.+20     	; 0x5c6 <SCI_InUHex+0x6a>
      number /=0x10;
 5b2:	34 e0       	ldi	r19, 0x04	; 4
 5b4:	d6 95       	lsr	r29
 5b6:	c7 95       	ror	r28
 5b8:	3a 95       	dec	r19
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <SCI_InUHex+0x58>
      length--;
 5bc:	01 50       	subi	r16, 0x01	; 1
 5be:	10 40       	sbci	r17, 0x00	; 0
      SCI_OutChar(character);
 5c0:	88 e0       	ldi	r24, 0x08	; 8
 5c2:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>

unsigned short SCI_InUHex(void){	
unsigned short number=0, digit, length=0;
unsigned char character;

  while((character=SCI_UpCase(SCI_InChar()))!=CR){	
 5c6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 5ca:	28 2f       	mov	r18, r24
//--------------------SCI_UpCase-------------------------------
// converts lowercase to uppercase
// char by subtracting	$20 from lowercase ASCII to	make uppercase ASCII

char SCI_UpCase(char character){	
  return ((character>='a') && (character<='z'))?character-0x20:character;}
 5cc:	81 56       	subi	r24, 0x61	; 97
 5ce:	8a 31       	cpi	r24, 0x1A	; 26
 5d0:	08 f4       	brcc	.+2      	; 0x5d4 <SCI_InUHex+0x78>
 5d2:	20 52       	subi	r18, 0x20	; 32

unsigned short SCI_InUHex(void){	
unsigned short number=0, digit, length=0;
unsigned char character;

  while((character=SCI_UpCase(SCI_InChar()))!=CR){	
 5d4:	2d 30       	cpi	r18, 0x0D	; 13
 5d6:	59 f6       	brne	.-106    	; 0x56e <SCI_InUHex+0x12>
      length--;
      SCI_OutChar(character);
    }
  }
  return number;
}
 5d8:	ce 01       	movw	r24, r28
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	08 95       	ret

000005e4 <SCI_InSDec_OpCode>:
//    with an absolute value up to 32767
// If you enter a number above 32767 or below -32767, 
//    it will truncate without reporting the error
// Backspace will remove last digit typed

short SCI_InSDec_OpCode(char * op_code){	
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	7c 01       	movw	r14, r24
short number=0, sign=1;	// sign flag 1=positive 0=negative
unsigned int length=0;
unsigned char character;

  character=SCI_InChar();
 5f2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 5f6:	28 2f       	mov	r18, r24
  if(character=='-'){
 5f8:	8d 32       	cpi	r24, 0x2D	; 45
 5fa:	31 f4       	brne	.+12     	; 0x608 <SCI_InSDec_OpCode+0x24>
    sign = -1;
    length++;
    SCI_OutChar('-');	// if - inputted, sign is negative
 5fc:	8d e2       	ldi	r24, 0x2D	; 45
 5fe:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
 602:	0f ef       	ldi	r16, 0xFF	; 255
 604:	1f ef       	ldi	r17, 0xFF	; 255
 606:	0a c0       	rjmp	.+20     	; 0x61c <SCI_InSDec_OpCode+0x38>
    }
  else if(character=='+'){
 608:	8b 32       	cpi	r24, 0x2B	; 43
 60a:	19 f0       	breq	.+6      	; 0x612 <SCI_InSDec_OpCode+0x2e>
 60c:	01 e0       	ldi	r16, 0x01	; 1
 60e:	10 e0       	ldi	r17, 0x00	; 0
 610:	08 c0       	rjmp	.+16     	; 0x622 <SCI_InSDec_OpCode+0x3e>
    length++;
    SCI_OutChar('+');	//if + inputted, sign is positive
 612:	8b e2       	ldi	r24, 0x2B	; 43
 614:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
 618:	01 e0       	ldi	r16, 0x01	; 1
 61a:	10 e0       	ldi	r17, 0x00	; 0
  }

  if((character=='-') || (character=='+'))character=SCI_InChar();
 61c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 620:	28 2f       	mov	r18, r24
 622:	c0 e0       	ldi	r28, 0x00	; 0
 624:	d0 e0       	ldi	r29, 0x00	; 0
 626:	13 c0       	rjmp	.+38     	; 0x64e <SCI_InSDec_OpCode+0x6a>
  
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
      number = 10*number+(character-'0');   // this line overflows if above 65535
 628:	ce 01       	movw	r24, r28
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	6a 95       	dec	r22
 632:	e1 f7       	brne	.-8      	; 0x62c <SCI_InSDec_OpCode+0x48>
 634:	cc 0f       	add	r28, r28
 636:	dd 1f       	adc	r29, r29
 638:	c8 0f       	add	r28, r24
 63a:	d9 1f       	adc	r29, r25
 63c:	c2 0f       	add	r28, r18
 63e:	d1 1d       	adc	r29, r1
 640:	e0 97       	sbiw	r28, 0x30	; 48
      length++;
      SCI_OutChar(character);
 642:	82 2f       	mov	r24, r18
 644:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
      character=SCI_InChar();
 648:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 64c:	28 2f       	mov	r18, r24

  if((character=='-') || (character=='+'))character=SCI_InChar();
  
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
 64e:	82 2f       	mov	r24, r18
 650:	80 53       	subi	r24, 0x30	; 48
 652:	8a 30       	cpi	r24, 0x0A	; 10
 654:	48 f3       	brcs	.-46     	; 0x628 <SCI_InSDec_OpCode+0x44>
      length++;
      SCI_OutChar(character);
      character=SCI_InChar();
  }
  
  *op_code = character;
 656:	f7 01       	movw	r30, r14
 658:	20 83       	st	Z, r18
 65a:	c0 9f       	mul	r28, r16
 65c:	90 01       	movw	r18, r0
 65e:	c1 9f       	mul	r28, r17
 660:	30 0d       	add	r19, r0
 662:	d0 9f       	mul	r29, r16
 664:	30 0d       	add	r19, r0
 666:	11 24       	eor	r1, r1
  return sign*number;
}
 668:	c9 01       	movw	r24, r18
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	1f 91       	pop	r17
 670:	0f 91       	pop	r16
 672:	ff 90       	pop	r15
 674:	ef 90       	pop	r14
 676:	08 95       	ret

00000678 <SCI_InSDec>:
//    with an absolute value up to 32767
// If you enter a number above 32767 or below -32767, 
//    it will truncate without reporting the error
// Backspace will remove last digit typed

short SCI_InSDec(void){	
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
short number=0, sign=1;	// sign flag 1=positive 0=negative
unsigned int length=0;
unsigned char character;

  character=SCI_InChar();
 680:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 684:	28 2f       	mov	r18, r24
  if(character=='-'){
 686:	8d 32       	cpi	r24, 0x2D	; 45
 688:	31 f4       	brne	.+12     	; 0x696 <SCI_InSDec+0x1e>
    sign = -1;
    length++;
    SCI_OutChar('-');	// if - inputted, sign is negative
 68a:	8d e2       	ldi	r24, 0x2D	; 45
 68c:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
 690:	0f ef       	ldi	r16, 0xFF	; 255
 692:	1f ef       	ldi	r17, 0xFF	; 255
 694:	0a c0       	rjmp	.+20     	; 0x6aa <SCI_InSDec+0x32>
    }
  else if(character=='+'){
 696:	8b 32       	cpi	r24, 0x2B	; 43
 698:	19 f0       	breq	.+6      	; 0x6a0 <SCI_InSDec+0x28>
 69a:	01 e0       	ldi	r16, 0x01	; 1
 69c:	10 e0       	ldi	r17, 0x00	; 0
 69e:	08 c0       	rjmp	.+16     	; 0x6b0 <SCI_InSDec+0x38>
    length++;
    SCI_OutChar('+');	//if + inputted, sign is positive
 6a0:	8b e2       	ldi	r24, 0x2B	; 43
 6a2:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
 6a6:	01 e0       	ldi	r16, 0x01	; 1
 6a8:	10 e0       	ldi	r17, 0x00	; 0
  }

  if((character=='-') || (character=='+'))character=SCI_InChar();
 6aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 6ae:	28 2f       	mov	r18, r24
 6b0:	c0 e0       	ldi	r28, 0x00	; 0
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	13 c0       	rjmp	.+38     	; 0x6dc <SCI_InSDec+0x64>
  
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
      number = 10*number+(character-'0');   // this line overflows if above 65535
 6b6:	ce 01       	movw	r24, r28
 6b8:	e3 e0       	ldi	r30, 0x03	; 3
 6ba:	88 0f       	add	r24, r24
 6bc:	99 1f       	adc	r25, r25
 6be:	ea 95       	dec	r30
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <SCI_InSDec+0x42>
 6c2:	cc 0f       	add	r28, r28
 6c4:	dd 1f       	adc	r29, r29
 6c6:	c8 0f       	add	r28, r24
 6c8:	d9 1f       	adc	r29, r25
 6ca:	c2 0f       	add	r28, r18
 6cc:	d1 1d       	adc	r29, r1
 6ce:	e0 97       	sbiw	r28, 0x30	; 48
      length++;
      SCI_OutChar(character);
 6d0:	82 2f       	mov	r24, r18
 6d2:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
      character=SCI_InChar();
 6d6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 6da:	28 2f       	mov	r18, r24

  if((character=='-') || (character=='+'))character=SCI_InChar();
  
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
 6dc:	82 2f       	mov	r24, r18
 6de:	80 53       	subi	r24, 0x30	; 48
 6e0:	8a 30       	cpi	r24, 0x0A	; 10
 6e2:	48 f3       	brcs	.-46     	; 0x6b6 <SCI_InSDec+0x3e>
 6e4:	c0 9f       	mul	r28, r16
 6e6:	90 01       	movw	r18, r0
 6e8:	c1 9f       	mul	r28, r17
 6ea:	30 0d       	add	r19, r0
 6ec:	d0 9f       	mul	r29, r16
 6ee:	30 0d       	add	r19, r0
 6f0:	11 24       	eor	r1, r1
      SCI_OutChar(character);
      character=SCI_InChar();
  }
  
  return sign*number;
}
 6f2:	c9 01       	movw	r24, r18
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	08 95       	ret

000006fe <SCI_InUDec_OpCode>:
//     and converts to a 16 bit unsigned number
//     with a maximum value of 65535
// If you enter a number above 65535, it will truncate without reporting the error
// Backspace will remove last digit typed

unsigned short SCI_InUDec_OpCode(char * op_code){	
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	8c 01       	movw	r16, r24
unsigned short number=0, length=0;
unsigned char character;	

  character=SCI_InChar();
 708:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 70c:	28 2f       	mov	r18, r24
 70e:	c0 e0       	ldi	r28, 0x00	; 0
 710:	d0 e0       	ldi	r29, 0x00	; 0
 712:	13 c0       	rjmp	.+38     	; 0x73a <SCI_InUDec_OpCode+0x3c>
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
      number = 10*number+(character-'0');   // this line overflows if above 65535
 714:	ce 01       	movw	r24, r28
 716:	a3 e0       	ldi	r26, 0x03	; 3
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	aa 95       	dec	r26
 71e:	e1 f7       	brne	.-8      	; 0x718 <SCI_InUDec_OpCode+0x1a>
 720:	cc 0f       	add	r28, r28
 722:	dd 1f       	adc	r29, r29
 724:	c8 0f       	add	r28, r24
 726:	d9 1f       	adc	r29, r25
 728:	c2 0f       	add	r28, r18
 72a:	d1 1d       	adc	r29, r1
 72c:	e0 97       	sbiw	r28, 0x30	; 48
      length++;
      SCI_OutChar(character);
 72e:	82 2f       	mov	r24, r18
 730:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
      character=SCI_InChar();
 734:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 738:	28 2f       	mov	r18, r24
unsigned char character;	

  character=SCI_InChar();
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
 73a:	82 2f       	mov	r24, r18
 73c:	80 53       	subi	r24, 0x30	; 48
 73e:	8a 30       	cpi	r24, 0x0A	; 10
 740:	48 f3       	brcs	.-46     	; 0x714 <SCI_InUDec_OpCode+0x16>
      number = 10*number+(character-'0');   // this line overflows if above 65535
      length++;
      SCI_OutChar(character);
      character=SCI_InChar();
  }
  *op_code = character;
 742:	f8 01       	movw	r30, r16
 744:	20 83       	st	Z, r18

  return number;
}
 746:	ce 01       	movw	r24, r28
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	08 95       	ret

00000752 <SCI_InUDec>:
//     and converts to a 16 bit unsigned number
//     with a maximum value of 65535
// If you enter a number above 65535, it will truncate without reporting the error
// Backspace will remove last digit typed

unsigned short SCI_InUDec(void){	
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
unsigned short number=0, length=0;
unsigned char character;	

  character=SCI_InChar();
 756:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 75a:	28 2f       	mov	r18, r24
 75c:	c0 e0       	ldi	r28, 0x00	; 0
 75e:	d0 e0       	ldi	r29, 0x00	; 0
 760:	13 c0       	rjmp	.+38     	; 0x788 <SCI_InUDec+0x36>
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
      number = 10*number+(character-'0');   // this line overflows if above 65535
 762:	ce 01       	movw	r24, r28
 764:	33 e0       	ldi	r19, 0x03	; 3
 766:	88 0f       	add	r24, r24
 768:	99 1f       	adc	r25, r25
 76a:	3a 95       	dec	r19
 76c:	e1 f7       	brne	.-8      	; 0x766 <SCI_InUDec+0x14>
 76e:	cc 0f       	add	r28, r28
 770:	dd 1f       	adc	r29, r29
 772:	c8 0f       	add	r28, r24
 774:	d9 1f       	adc	r29, r25
 776:	c2 0f       	add	r28, r18
 778:	d1 1d       	adc	r29, r1
 77a:	e0 97       	sbiw	r28, 0x30	; 48
      length++;
      SCI_OutChar(character);
 77c:	82 2f       	mov	r24, r18
 77e:	0e 94 ed 00 	call	0x1da	; 0x1da <SCI_OutChar>
      character=SCI_InChar();
 782:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <SCI_InChar>
 786:	28 2f       	mov	r18, r24
unsigned char character;	

  character=SCI_InChar();
// The next line checks that the input is a digit, 0-9.
// If the character is not 0-9, it is ignored and not echoed
  while(((character>='0') && (character<='9'))){ 
 788:	82 2f       	mov	r24, r18
 78a:	80 53       	subi	r24, 0x30	; 48
 78c:	8a 30       	cpi	r24, 0x0A	; 10
 78e:	48 f3       	brcs	.-46     	; 0x762 <SCI_InUDec+0x10>
      length++;
      SCI_OutChar(character);
      character=SCI_InChar();
  }
  return number;
}
 790:	ce 01       	movw	r24, r28
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <__udivmodhi4>:
 798:	aa 1b       	sub	r26, r26
 79a:	bb 1b       	sub	r27, r27
 79c:	51 e1       	ldi	r21, 0x11	; 17
 79e:	07 c0       	rjmp	.+14     	; 0x7ae <__udivmodhi4_ep>

000007a0 <__udivmodhi4_loop>:
 7a0:	aa 1f       	adc	r26, r26
 7a2:	bb 1f       	adc	r27, r27
 7a4:	a6 17       	cp	r26, r22
 7a6:	b7 07       	cpc	r27, r23
 7a8:	10 f0       	brcs	.+4      	; 0x7ae <__udivmodhi4_ep>
 7aa:	a6 1b       	sub	r26, r22
 7ac:	b7 0b       	sbc	r27, r23

000007ae <__udivmodhi4_ep>:
 7ae:	88 1f       	adc	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	5a 95       	dec	r21
 7b4:	a9 f7       	brne	.-22     	; 0x7a0 <__udivmodhi4_loop>
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	bc 01       	movw	r22, r24
 7bc:	cd 01       	movw	r24, r26
 7be:	08 95       	ret

000007c0 <fdevopen>:
 7c0:	0f 93       	push	r16
 7c2:	1f 93       	push	r17
 7c4:	cf 93       	push	r28
 7c6:	df 93       	push	r29
 7c8:	8c 01       	movw	r16, r24
 7ca:	eb 01       	movw	r28, r22
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	31 f4       	brne	.+12     	; 0x7dc <fdevopen+0x1c>
 7d0:	61 15       	cp	r22, r1
 7d2:	71 05       	cpc	r23, r1
 7d4:	19 f4       	brne	.+6      	; 0x7dc <fdevopen+0x1c>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	38 c0       	rjmp	.+112    	; 0x84c <fdevopen+0x8c>
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	6e e0       	ldi	r22, 0x0E	; 14
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	0e 94 2c 04 	call	0x858	; 0x858 <calloc>
 7e8:	fc 01       	movw	r30, r24
 7ea:	9c 01       	movw	r18, r24
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	71 f1       	breq	.+92     	; 0x84c <fdevopen+0x8c>
 7f0:	80 e8       	ldi	r24, 0x80	; 128
 7f2:	83 83       	std	Z+3, r24	; 0x03
 7f4:	20 97       	sbiw	r28, 0x00	; 0
 7f6:	71 f0       	breq	.+28     	; 0x814 <fdevopen+0x54>
 7f8:	d3 87       	std	Z+11, r29	; 0x0b
 7fa:	c2 87       	std	Z+10, r28	; 0x0a
 7fc:	81 e8       	ldi	r24, 0x81	; 129
 7fe:	83 83       	std	Z+3, r24	; 0x03
 800:	80 91 2f 01 	lds	r24, 0x012F
 804:	90 91 30 01 	lds	r25, 0x0130
 808:	89 2b       	or	r24, r25
 80a:	21 f4       	brne	.+8      	; 0x814 <fdevopen+0x54>
 80c:	f0 93 30 01 	sts	0x0130, r31
 810:	e0 93 2f 01 	sts	0x012F, r30
 814:	01 15       	cp	r16, r1
 816:	11 05       	cpc	r17, r1
 818:	c9 f0       	breq	.+50     	; 0x84c <fdevopen+0x8c>
 81a:	11 87       	std	Z+9, r17	; 0x09
 81c:	00 87       	std	Z+8, r16	; 0x08
 81e:	83 81       	ldd	r24, Z+3	; 0x03
 820:	82 60       	ori	r24, 0x02	; 2
 822:	83 83       	std	Z+3, r24	; 0x03
 824:	80 91 31 01 	lds	r24, 0x0131
 828:	90 91 32 01 	lds	r25, 0x0132
 82c:	89 2b       	or	r24, r25
 82e:	71 f4       	brne	.+28     	; 0x84c <fdevopen+0x8c>
 830:	f0 93 32 01 	sts	0x0132, r31
 834:	e0 93 31 01 	sts	0x0131, r30
 838:	80 91 33 01 	lds	r24, 0x0133
 83c:	90 91 34 01 	lds	r25, 0x0134
 840:	89 2b       	or	r24, r25
 842:	21 f4       	brne	.+8      	; 0x84c <fdevopen+0x8c>
 844:	f0 93 34 01 	sts	0x0134, r31
 848:	e0 93 33 01 	sts	0x0133, r30
 84c:	c9 01       	movw	r24, r18
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <calloc>:
 858:	0f 93       	push	r16
 85a:	1f 93       	push	r17
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	68 9f       	mul	r22, r24
 862:	80 01       	movw	r16, r0
 864:	69 9f       	mul	r22, r25
 866:	10 0d       	add	r17, r0
 868:	78 9f       	mul	r23, r24
 86a:	10 0d       	add	r17, r0
 86c:	11 24       	eor	r1, r1
 86e:	c8 01       	movw	r24, r16
 870:	0e 94 48 04 	call	0x890	; 0x890 <malloc>
 874:	ec 01       	movw	r28, r24
 876:	00 97       	sbiw	r24, 0x00	; 0
 878:	29 f0       	breq	.+10     	; 0x884 <calloc+0x2c>
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	a8 01       	movw	r20, r16
 880:	0e 94 4d 05 	call	0xa9a	; 0xa9a <memset>
 884:	ce 01       	movw	r24, r28
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	1f 91       	pop	r17
 88c:	0f 91       	pop	r16
 88e:	08 95       	ret

00000890 <malloc>:
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	bc 01       	movw	r22, r24
 896:	82 30       	cpi	r24, 0x02	; 2
 898:	91 05       	cpc	r25, r1
 89a:	10 f4       	brcc	.+4      	; 0x8a0 <malloc+0x10>
 89c:	62 e0       	ldi	r22, 0x02	; 2
 89e:	70 e0       	ldi	r23, 0x00	; 0
 8a0:	a0 91 37 01 	lds	r26, 0x0137
 8a4:	b0 91 38 01 	lds	r27, 0x0138
 8a8:	ed 01       	movw	r28, r26
 8aa:	e0 e0       	ldi	r30, 0x00	; 0
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	21 c0       	rjmp	.+66     	; 0x8f6 <malloc+0x66>
 8b4:	88 81       	ld	r24, Y
 8b6:	99 81       	ldd	r25, Y+1	; 0x01
 8b8:	86 17       	cp	r24, r22
 8ba:	97 07       	cpc	r25, r23
 8bc:	69 f4       	brne	.+26     	; 0x8d8 <malloc+0x48>
 8be:	8a 81       	ldd	r24, Y+2	; 0x02
 8c0:	9b 81       	ldd	r25, Y+3	; 0x03
 8c2:	30 97       	sbiw	r30, 0x00	; 0
 8c4:	19 f0       	breq	.+6      	; 0x8cc <malloc+0x3c>
 8c6:	93 83       	std	Z+3, r25	; 0x03
 8c8:	82 83       	std	Z+2, r24	; 0x02
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <malloc+0x44>
 8cc:	90 93 38 01 	sts	0x0138, r25
 8d0:	80 93 37 01 	sts	0x0137, r24
 8d4:	fe 01       	movw	r30, r28
 8d6:	34 c0       	rjmp	.+104    	; 0x940 <malloc+0xb0>
 8d8:	68 17       	cp	r22, r24
 8da:	79 07       	cpc	r23, r25
 8dc:	38 f4       	brcc	.+14     	; 0x8ec <malloc+0x5c>
 8de:	41 15       	cp	r20, r1
 8e0:	51 05       	cpc	r21, r1
 8e2:	19 f0       	breq	.+6      	; 0x8ea <malloc+0x5a>
 8e4:	84 17       	cp	r24, r20
 8e6:	95 07       	cpc	r25, r21
 8e8:	08 f4       	brcc	.+2      	; 0x8ec <malloc+0x5c>
 8ea:	ac 01       	movw	r20, r24
 8ec:	fe 01       	movw	r30, r28
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	9b 81       	ldd	r25, Y+3	; 0x03
 8f2:	9c 01       	movw	r18, r24
 8f4:	e9 01       	movw	r28, r18
 8f6:	20 97       	sbiw	r28, 0x00	; 0
 8f8:	e9 f6       	brne	.-70     	; 0x8b4 <malloc+0x24>
 8fa:	41 15       	cp	r20, r1
 8fc:	51 05       	cpc	r21, r1
 8fe:	a9 f1       	breq	.+106    	; 0x96a <malloc+0xda>
 900:	ca 01       	movw	r24, r20
 902:	86 1b       	sub	r24, r22
 904:	97 0b       	sbc	r25, r23
 906:	04 97       	sbiw	r24, 0x04	; 4
 908:	08 f4       	brcc	.+2      	; 0x90c <malloc+0x7c>
 90a:	ba 01       	movw	r22, r20
 90c:	e0 e0       	ldi	r30, 0x00	; 0
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	2a c0       	rjmp	.+84     	; 0x966 <malloc+0xd6>
 912:	8d 91       	ld	r24, X+
 914:	9c 91       	ld	r25, X
 916:	11 97       	sbiw	r26, 0x01	; 1
 918:	84 17       	cp	r24, r20
 91a:	95 07       	cpc	r25, r21
 91c:	f9 f4       	brne	.+62     	; 0x95c <malloc+0xcc>
 91e:	64 17       	cp	r22, r20
 920:	75 07       	cpc	r23, r21
 922:	81 f4       	brne	.+32     	; 0x944 <malloc+0xb4>
 924:	12 96       	adiw	r26, 0x02	; 2
 926:	8d 91       	ld	r24, X+
 928:	9c 91       	ld	r25, X
 92a:	13 97       	sbiw	r26, 0x03	; 3
 92c:	30 97       	sbiw	r30, 0x00	; 0
 92e:	19 f0       	breq	.+6      	; 0x936 <malloc+0xa6>
 930:	93 83       	std	Z+3, r25	; 0x03
 932:	82 83       	std	Z+2, r24	; 0x02
 934:	04 c0       	rjmp	.+8      	; 0x93e <malloc+0xae>
 936:	90 93 38 01 	sts	0x0138, r25
 93a:	80 93 37 01 	sts	0x0137, r24
 93e:	fd 01       	movw	r30, r26
 940:	32 96       	adiw	r30, 0x02	; 2
 942:	4f c0       	rjmp	.+158    	; 0x9e2 <malloc+0x152>
 944:	ca 01       	movw	r24, r20
 946:	86 1b       	sub	r24, r22
 948:	97 0b       	sbc	r25, r23
 94a:	fd 01       	movw	r30, r26
 94c:	e8 0f       	add	r30, r24
 94e:	f9 1f       	adc	r31, r25
 950:	61 93       	st	Z+, r22
 952:	71 93       	st	Z+, r23
 954:	02 97       	sbiw	r24, 0x02	; 2
 956:	8d 93       	st	X+, r24
 958:	9c 93       	st	X, r25
 95a:	43 c0       	rjmp	.+134    	; 0x9e2 <malloc+0x152>
 95c:	fd 01       	movw	r30, r26
 95e:	82 81       	ldd	r24, Z+2	; 0x02
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	9c 01       	movw	r18, r24
 964:	d9 01       	movw	r26, r18
 966:	10 97       	sbiw	r26, 0x00	; 0
 968:	a1 f6       	brne	.-88     	; 0x912 <malloc+0x82>
 96a:	80 91 35 01 	lds	r24, 0x0135
 96e:	90 91 36 01 	lds	r25, 0x0136
 972:	89 2b       	or	r24, r25
 974:	41 f4       	brne	.+16     	; 0x986 <malloc+0xf6>
 976:	80 91 28 01 	lds	r24, 0x0128
 97a:	90 91 29 01 	lds	r25, 0x0129
 97e:	90 93 36 01 	sts	0x0136, r25
 982:	80 93 35 01 	sts	0x0135, r24
 986:	40 91 2a 01 	lds	r20, 0x012A
 98a:	50 91 2b 01 	lds	r21, 0x012B
 98e:	41 15       	cp	r20, r1
 990:	51 05       	cpc	r21, r1
 992:	41 f4       	brne	.+16     	; 0x9a4 <malloc+0x114>
 994:	4d b7       	in	r20, 0x3d	; 61
 996:	5e b7       	in	r21, 0x3e	; 62
 998:	80 91 26 01 	lds	r24, 0x0126
 99c:	90 91 27 01 	lds	r25, 0x0127
 9a0:	48 1b       	sub	r20, r24
 9a2:	59 0b       	sbc	r21, r25
 9a4:	20 91 35 01 	lds	r18, 0x0135
 9a8:	30 91 36 01 	lds	r19, 0x0136
 9ac:	24 17       	cp	r18, r20
 9ae:	35 07       	cpc	r19, r21
 9b0:	b0 f4       	brcc	.+44     	; 0x9de <malloc+0x14e>
 9b2:	ca 01       	movw	r24, r20
 9b4:	82 1b       	sub	r24, r18
 9b6:	93 0b       	sbc	r25, r19
 9b8:	86 17       	cp	r24, r22
 9ba:	97 07       	cpc	r25, r23
 9bc:	80 f0       	brcs	.+32     	; 0x9de <malloc+0x14e>
 9be:	ab 01       	movw	r20, r22
 9c0:	4e 5f       	subi	r20, 0xFE	; 254
 9c2:	5f 4f       	sbci	r21, 0xFF	; 255
 9c4:	84 17       	cp	r24, r20
 9c6:	95 07       	cpc	r25, r21
 9c8:	50 f0       	brcs	.+20     	; 0x9de <malloc+0x14e>
 9ca:	42 0f       	add	r20, r18
 9cc:	53 1f       	adc	r21, r19
 9ce:	50 93 36 01 	sts	0x0136, r21
 9d2:	40 93 35 01 	sts	0x0135, r20
 9d6:	f9 01       	movw	r30, r18
 9d8:	61 93       	st	Z+, r22
 9da:	71 93       	st	Z+, r23
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <malloc+0x152>
 9de:	e0 e0       	ldi	r30, 0x00	; 0
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	cf 01       	movw	r24, r30
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	08 95       	ret

000009ea <free>:
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <free+0xa>
 9f2:	50 c0       	rjmp	.+160    	; 0xa94 <free+0xaa>
 9f4:	ec 01       	movw	r28, r24
 9f6:	22 97       	sbiw	r28, 0x02	; 2
 9f8:	1b 82       	std	Y+3, r1	; 0x03
 9fa:	1a 82       	std	Y+2, r1	; 0x02
 9fc:	a0 91 37 01 	lds	r26, 0x0137
 a00:	b0 91 38 01 	lds	r27, 0x0138
 a04:	10 97       	sbiw	r26, 0x00	; 0
 a06:	09 f1       	breq	.+66     	; 0xa4a <free+0x60>
 a08:	40 e0       	ldi	r20, 0x00	; 0
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	ac 17       	cp	r26, r28
 a0e:	bd 07       	cpc	r27, r29
 a10:	08 f1       	brcs	.+66     	; 0xa54 <free+0x6a>
 a12:	bb 83       	std	Y+3, r27	; 0x03
 a14:	aa 83       	std	Y+2, r26	; 0x02
 a16:	fe 01       	movw	r30, r28
 a18:	21 91       	ld	r18, Z+
 a1a:	31 91       	ld	r19, Z+
 a1c:	e2 0f       	add	r30, r18
 a1e:	f3 1f       	adc	r31, r19
 a20:	ae 17       	cp	r26, r30
 a22:	bf 07       	cpc	r27, r31
 a24:	79 f4       	brne	.+30     	; 0xa44 <free+0x5a>
 a26:	8d 91       	ld	r24, X+
 a28:	9c 91       	ld	r25, X
 a2a:	11 97       	sbiw	r26, 0x01	; 1
 a2c:	28 0f       	add	r18, r24
 a2e:	39 1f       	adc	r19, r25
 a30:	2e 5f       	subi	r18, 0xFE	; 254
 a32:	3f 4f       	sbci	r19, 0xFF	; 255
 a34:	39 83       	std	Y+1, r19	; 0x01
 a36:	28 83       	st	Y, r18
 a38:	12 96       	adiw	r26, 0x02	; 2
 a3a:	8d 91       	ld	r24, X+
 a3c:	9c 91       	ld	r25, X
 a3e:	13 97       	sbiw	r26, 0x03	; 3
 a40:	9b 83       	std	Y+3, r25	; 0x03
 a42:	8a 83       	std	Y+2, r24	; 0x02
 a44:	41 15       	cp	r20, r1
 a46:	51 05       	cpc	r21, r1
 a48:	71 f4       	brne	.+28     	; 0xa66 <free+0x7c>
 a4a:	d0 93 38 01 	sts	0x0138, r29
 a4e:	c0 93 37 01 	sts	0x0137, r28
 a52:	20 c0       	rjmp	.+64     	; 0xa94 <free+0xaa>
 a54:	12 96       	adiw	r26, 0x02	; 2
 a56:	8d 91       	ld	r24, X+
 a58:	9c 91       	ld	r25, X
 a5a:	13 97       	sbiw	r26, 0x03	; 3
 a5c:	ad 01       	movw	r20, r26
 a5e:	00 97       	sbiw	r24, 0x00	; 0
 a60:	11 f0       	breq	.+4      	; 0xa66 <free+0x7c>
 a62:	dc 01       	movw	r26, r24
 a64:	d3 cf       	rjmp	.-90     	; 0xa0c <free+0x22>
 a66:	fa 01       	movw	r30, r20
 a68:	d3 83       	std	Z+3, r29	; 0x03
 a6a:	c2 83       	std	Z+2, r28	; 0x02
 a6c:	21 91       	ld	r18, Z+
 a6e:	31 91       	ld	r19, Z+
 a70:	e2 0f       	add	r30, r18
 a72:	f3 1f       	adc	r31, r19
 a74:	ce 17       	cp	r28, r30
 a76:	df 07       	cpc	r29, r31
 a78:	69 f4       	brne	.+26     	; 0xa94 <free+0xaa>
 a7a:	88 81       	ld	r24, Y
 a7c:	99 81       	ldd	r25, Y+1	; 0x01
 a7e:	28 0f       	add	r18, r24
 a80:	39 1f       	adc	r19, r25
 a82:	2e 5f       	subi	r18, 0xFE	; 254
 a84:	3f 4f       	sbci	r19, 0xFF	; 255
 a86:	fa 01       	movw	r30, r20
 a88:	31 83       	std	Z+1, r19	; 0x01
 a8a:	20 83       	st	Z, r18
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	93 83       	std	Z+3, r25	; 0x03
 a92:	82 83       	std	Z+2, r24	; 0x02
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	08 95       	ret

00000a9a <memset>:
 a9a:	dc 01       	movw	r26, r24
 a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <memset+0x6>
 a9e:	6d 93       	st	X+, r22
 aa0:	41 50       	subi	r20, 0x01	; 1
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	e0 f7       	brcc	.-8      	; 0xa9e <memset+0x4>
 aa6:	08 95       	ret

00000aa8 <_exit>:
 aa8:	f8 94       	cli

00000aaa <__stop_program>:
 aaa:	ff cf       	rjmp	.-2      	; 0xaaa <__stop_program>
